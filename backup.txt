import React, { useState, useEffect } from 'react';

// Path for QRIS payment image from the public folder
const qrisImage = '/img/pay/pay.jpg';
// Placeholder image for menus that don't have a specific image yet
const menuPlaceholderImage = (text) => `https://placehold.co/400x300/3498db/ffffff?text=${encodeURIComponent(text)}`;

// Main data structure for all menus and their details
const menuData = {
  ramen: [
    { id: 'ramen-miso', name: 'Ramen Miso', price: 25000, image: '/img/products/ramen/mis.jpg' },
    { id: 'ramen-curry', name: 'Ramen Curry', price: 27000, image: '/img/products/ramen/cur.jpg' },
    { id: 'ramen-shyou', name: 'Ramen Shyou', price: 24000, image: '/img/products/ramen/sho.jpg' },
    { id: 'ramen-tomyam', name: 'Ramen Tomyam', price: 28000, image: '/img/products/ramen/tom.jpg' },
  ],
  sushi: [
    { id: 'sushi-chicken', name: 'Sushi Chicken', price: 15000, image:  '/img/products/sushi/chicken ori.png'},
    { id: 'sushi-beef', name: 'Sushi Beef', price: 18000, image:  '/img/products/sushi/beef ori.png'},
    { id: 'sushi-sosis', name: 'Sushi Sosis', price: 14000, image:  '/img/products/sushi/sausage ori.png'},
    { id: 'sushi-crab', name: 'Sushi Crab', price: 16000, image: '/img/products/sushi/crab ori.png' },
    { id: 'sushi-shrimp', name: 'Sushi Shrimp', price: 17000, image: '/img/products/sushi/shrimp ori.png' },
    { id: 'sushi-fusion-beef-cheese-roll', name: 'Fusion Beef Cheese Roll', price: 22000, image: menuPlaceholderImage('Fusion Beef Cheese Roll'), type: 'fusion-mentai' },
    { id: 'sushi-fusion-tuna-spicy-roll', name: 'Fusion Tuna Spicy Roll', price: 23000, image: menuPlaceholderImage('Fusion Tuna Spicy Roll'), type: 'fusion-mentai' },
    { id: 'sushi-fusion-california-roll', name: 'Fusion California Roll', price: 21000, image: menuPlaceholderImage('Fusion California Roll'), type: 'fusion-mentai' },
    { id: 'sushi-fusion-pizza-roll', name: 'Fusion Pizza Roll', price: 24000, image: menuPlaceholderImage('Fusion Pizza Roll'), type: 'fusion-mentai' },
    { id: 'sushi-fusion-bbq-roll', name: 'Fusion BBQ Roll', price: 25000, image: menuPlaceholderImage('Fusion BBQ Roll'), type: 'fusion-mentai' },
    { id: 'sushi-fusion-spicy-california-roll', name: 'Fusion Spicy California Roll', price: 22000, image: menuPlaceholderImage('Fusion Spicy California Roll'), type: 'fusion-mentai' },
    { id: 'sushi-fusion-ocean-roll', name: 'Fusion Ocean Roll', price: 26000, image: menuPlaceholderImage('Fusion Ocean Roll'), type: 'fusion-mentai' },
    { id: 'sushi-fusion-ebi-tempura-roll', name: 'Fusion Ebi Tempura Roll', price: 24000, image: menuPlaceholderImage('Fusion Ebi Tempura Roll'), type: 'fusion-mentai' },
    { id: 'sushi-mentai-crab', name: 'Mentai Crab', price: 20000, image: menuPlaceholderImage('Mentai Crab'), type: 'fusion-mentai' },
    { id: 'sushi-mentai-sosis', name: 'Mentai Sosis', price: 19000, image: menuPlaceholderImage('Mentai Sosis'), type: 'fusion-mentai' },
    { id: 'sushi-mentai-shrimp', name: 'Mentai Shrimp', price: 21000, image: menuPlaceholderImage('Mentai Shrimp'), type: 'fusion-mentai' },
  ],
  drink: [
    { id: 'drink-strawberry-punch', name: 'Strawberry Punch', price: 12000, image: menuPlaceholderImage('Strawberry Punch') },
    { id: 'drink-ocha-lychee', name: 'Ocha Lychee', price: 11000, image: menuPlaceholderImage('Ocha Lychee') },
    { id: 'drink-sparkling-moca', name: 'Sparkling Moca', price: 15000, image: menuPlaceholderImage('Sparkling Moca') },
    { id: 'drink-lychee-jell', name: 'Lychee Jell', price: 13000, image: menuPlaceholderImage('Lychee Jell') },
    { id: 'drink-mango-squash', name: 'Mango Squash', price: 14000, image: menuPlaceholderImage('Mango Squash') },
    { id: 'drink-orange-juice', name: 'Orange Juice', price: 10000, image: menuPlaceholderImage('Orange Juice') },
    { id: 'drink-ocha-original', name: 'Ocha Original', price: 8000, image: menuPlaceholderImage('Ocha Original') },
    { id: 'drink-ocha-lemon', name: 'Ocha Lemon', price: 10000, image: menuPlaceholderImage('Ocha Lemon') },
    { id: 'drink-ocha-milk', name: 'Ocha Milk', price: 9000, image: menuPlaceholderImage('Ocha Milk') },
  ],
  dorayaki: [
    { id: 'dorayaki-coklat', name: 'Dorayaki Coklat', price: 8000, image: menuPlaceholderImage('Dorayaki Coklat') },
    { id: 'dorayaki-kacang', name: 'Dorayaki Kacang', price: 8000, image: menuPlaceholderImage('Dorayaki Kacang') },
    { id: 'dorayaki-strawberry', name: 'Dorayaki Strawberry', price: 8000, image: menuPlaceholderImage('Dorayaki Strawberry') },
    { id: 'dorayaki-cheese', name: 'Dorayaki Cheese', price: 9000, image: menuPlaceholderImage('Dorayaki Cheese') },
    { id: 'dorayaki-milo', name: 'Dorayaki Milo', price: 9000, image: menuPlaceholderImage('Dorayaki Milo') },
    { id: 'dorayaki-srikaya', name: 'Dorayaki Srikaya', price: 9000, image: menuPlaceholderImage('Dorayaki Srikaya') },
  ],
  takoyaki: [
    { id: 'takoyaki-mix', name: 'Takoyaki Mix', price: 18000, image: menuPlaceholderImage('Takoyaki Mix') },
    { id: 'takoyaki-cheese', name: 'Takoyaki Cheese', price: 17000, image: menuPlaceholderImage('Takoyaki Cheese') },
    { id: 'takoyaki-crab', name: 'Takoyaki Crab', price: 16000, image: menuPlaceholderImage('Takoyaki Crab') },
    { id: 'takoyaki-chicken', name: 'Takoyaki Chicken', price: 15000, image: menuPlaceholderImage('Takoyaki Chicken') },
    { id: 'takoyaki-beef', name: 'Takoyaki Beef', price: 18000, image: menuPlaceholderImage('Takoyaki Beef') },
    { id: 'takoyaki-octopus', name: 'Takoyaki Octopus', price: 20000, image: menuPlaceholderImage('Takoyaki Octopus') },
    { id: 'takoyaki-shrimp', name: 'Takoyaki Shrimp', price: 19000, image: menuPlaceholderImage('Takoyaki Shrimp') },
    { id: 'takoyaki-sosis', name: 'Takoyaki Sosis', price: 15000, image: menuPlaceholderImage('Takoyaki Sosis') },
    { id: 'takoyaki-mozzarella', name: 'Takoyaki Mozzarella', price: 19000, image: menuPlaceholderImage('Takoyaki Mozzarella') },
  ],
  dimsum: [
    { id: 'dimsum-cakalang', name: 'Dimsum Cakalang', price: 15000, image: menuPlaceholderImage('Dimsum Cakalang') },
    { id: 'dimsum-mayoseaweed', name: 'Dimsum Mayoseaweed', price: 16000, image: menuPlaceholderImage('Dimsum Mayoseaweed') },
    { id: 'dimsum-mozzarella', name: 'Dimsum Mozzarella', price: 17000, image: menuPlaceholderImage('Dimsum Mozzarella') },
    { id: 'dimsum-tobiko', name: 'Dimsum Tobiko', price: 18000, image: menuPlaceholderImage('Dimsum Tobiko') },
  ],
  okonomiyaki: [
    { id: 'okonomiyaki-crab', name: 'Okonomiyaki Crab', price: 20000, image: menuPlaceholderImage('Okonomiyaki Crab') },
    { id: 'okonomiyaki-beef', name: 'Okonomiyaki Beef', price: 22000, image: menuPlaceholderImage('Okonomiyaki Beef') },
    { id: 'okonomiyaki-chicken', name: 'Okonomiyaki Chicken', price: 19000, image: menuPlaceholderImage('Okonomiyaki Chicken') },
    { id: 'okonomiyaki-sosis', name: 'Okonomiyaki Sosis', price: 18000, image: menuPlaceholderImage('Okonomiyaki Sosis') },
    { id: 'okonomiyaki-tuna', name: 'Okonomiyaki Tuna', price: 21000, image: menuPlaceholderImage('Okonomiyaki Tuna') },
    { id: 'okonomiyaki-shrimp', name: 'Okonomiyaki Shrimp', price: 23000, image: menuPlaceholderImage('Okonomiyaki Shrimp') },
    { id: 'okonomiyaki-octopus', name: 'Okonomiyaki Octopus', price: 25000, image: menuPlaceholderImage('Okonomiyaki Octopus') },
    { id: 'okonomiyaki-mix-filling-2', name: 'Okonomiyaki Mix Filling 2', price: 13000, image: menuPlaceholderImage('Okonomiyaki Mix Filling 2'), type: 'mix' },
    { id: 'okonomiyaki-mix-filling-3', name: 'Okonomiyaki Mix Filling 3', price: 13000, image: menuPlaceholderImage('Okonomiyaki Mix Filling 3'), type: 'mix' },
  ],
  paket: [
    { id: 'paket-sweet-couple', name: 'Sweet Couple', price: 45000, image: menuPlaceholderImage('Paket Sweet Couple') },
    { id: 'paket-spicy-couple', name: 'Spicy Couple', price: 47000, image: menuPlaceholderImage('Paket Spicy Couple') },
    { id: 'paket-daimyo-a', name: 'Daimyo A', price: 60000, image: menuPlaceholderImage('Paket Daimyo A') },
    { id: 'paket-daimyo-b', name: 'Daimyo B', price: 65000, image: menuPlaceholderImage('Paket Daimyo B') },
    { id: 'paket-daimyo-c', name: 'Daimyo C', price: 70000, image: menuPlaceholderImage('Paket Daimyo C') },
    { id: 'paket-daimyo-d', name: 'Daimyo D', price: 75000, image: menuPlaceholderImage('Paket Daimyo D') },
  ],
  birthday: [
    { id: 'birthday-rokuon-set', name: 'Rokuon Set', price: 150000, image: menuPlaceholderImage('Rokuon Set') },
    { id: 'birthday-kofuku-set', name: 'Kofuku Set', price: 160000, image: menuPlaceholderImage('Kofuku Set') },
    { id: 'birthday-ruriko-set', name: 'Ruriko Set', price: 140000, image: menuPlaceholderImage('Ruriko Set') },
    { id: 'birthday-horyu-set', name: 'Horyu Set', price: 250000, image: menuPlaceholderImage('Horyu Set') },
    { id: 'birthday-todai-set', name: 'Todai Set', price: 200000, image: menuPlaceholderImage('Todai Set') },
    { id: 'birthday-tou-set', name: 'Tou Set', price: 180000, image: menuPlaceholderImage('Tou Set') },
    { id: 'birthday-chuson-set', name: 'Chuson Set', price: 270000, image: menuPlaceholderImage('Chuson Set') },
    { id: 'birthday-senso-set', name: 'Senso Set', price: 290000, image: menuPlaceholderImage('Senso Set') },
    { id: 'birthday-shintenno-set', name: 'Shintenno Set', price: 130000, image: menuPlaceholderImage('Shintenno Set') },
    { id: 'birthday-takoparty', name: 'Takoparty', price: 85000, image: menuPlaceholderImage('Takoparty') },
  ],
};

const menuCategories = [
  { id: 'ramen', name: 'Ramen' },
  { id: 'sushi', name: 'Sushi' },
  { id: 'drink', name: 'Drink' },
  { id: 'dorayaki', name: 'Dorayaki' },
  { id: 'takoyaki', name: 'Takoyaki' },
  { id: 'dimsum', name: 'Dimsum' },
  { id: 'okonomiyaki', name: 'Okonomiyaki' },
  { id: 'paket', name: 'Paket' },
  { id: 'birthday', name: 'Birthday' },
];

// Helper function to format price to Rupiah
const formatRupiah = (price) => {
  return new Intl.NumberFormat('id-ID', {
    style: 'currency',
    currency: 'IDR',
    minimumFractionDigits: 0,
  }).format(price);
};

// Main App Component
const App = () => {
  const [activeCategory, setActiveCategory] = useState('ramen');
  const [cart, setCart] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalType, setModalType] = useState(null);
  const [modalData, setModalData] = useState(null);
  const [alertMessage, setAlertMessage] = useState('');
  const [isAiModalOpen, setIsAiModalOpen] = useState(false);
  const [aiRecommendation, setAiRecommendation] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Function to open the customization modal
  const openCustomizationModal = (menuItem, category, itemIndex = -1) => {
    setModalData({ ...menuItem, category, cartIndex: itemIndex });
    setModalType('customization');
    setIsModalOpen(true);
  };

  // Function to add an item to the cart
  const addToCart = (item) => {
    setCart((prevCart) => [...prevCart, item]);
    setIsModalOpen(false);
    showAlert('Pesanan ditambahkan ke keranjang!');
  };

  // Function to update an item in the cart
  const updateCartItem = (updatedItem, index) => {
    const newCart = [...cart];
    newCart[index] = updatedItem;
    setCart(newCart);
    setIsModalOpen(false);
    showAlert('Pesanan berhasil diubah!');
  };

  // Function to remove an item from the cart
  const removeCartItem = (index) => {
    setCart((prevCart) => prevCart.filter((_, i) => i !== index));
  };

  // Function to show a custom alert pop-up
  const showAlert = (message) => {
    setAlertMessage(message);
    setTimeout(() => setAlertMessage(''), 3000);
  };

  // Function to get recommendation from Gemini API
  const getAiRecommendation = async () => {
    setIsLoading(true);
    setIsAiModalOpen(true);
    setAiRecommendation('Mencari rekomendasi menu terbaik...');

    const prompt = "Rekomendasikan 3 menu terlaris dari daftar menu ini: Ramen, Sushi, Drink, Dorayaki, Takoyaki, Dimsum, Okonomiyaki, Paket, dan Birthday. Jelaskan mengapa menu tersebut populer. Gunakan bahasa Indonesia.";
    
    // API call using gemini-2.5-flash-preview-05-20 model
    const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
    const payload = { contents: chatHistory };
    const apiKey = "AIzaSyAGutlotV5MBA_-nplmfCB7KWQ_pQfYn5c";
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

    let resultText = '';
    let retries = 0;
    const maxRetries = 5;

    while (retries < maxRetries) {
      try {
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const result = await response.json();

        if (result.candidates && result.candidates.length > 0 &&
            result.candidates[0].content && result.candidates[0].content.parts &&
            result.candidates[0].content.parts.length > 0) {
          resultText = result.candidates[0].content.parts[0].text;
          break; // Exit the loop on success
        } else {
          throw new Error('Unexpected API response structure.');
        }

      } catch (error) {
        console.error('Error fetching AI recommendation:', error);
        retries++;
        if (retries < maxRetries) {
          const delay = Math.pow(2, retries) * 1000;
          await new Promise(res => setTimeout(res, delay));
        } else {
          resultText = 'Maaf, gagal mendapatkan rekomendasi. Silakan coba lagi.';
        }
      }
    }

    setAiRecommendation(resultText);
    setIsLoading(false);
  };

  // Component to render menu cards
  const MenuCard = ({ item, category }) => {
    return (
      <div className="bg-white p-4 rounded-lg shadow-md flex flex-col justify-between">
        <img
          src={item.image}
          alt={item.name}
          className="w-full h-80 object-cover rounded-md mb-4"
          // Class h-80 (height: 20rem or 320px) makes the image significantly larger
        />
        <h3 className="text-lg font-semibold text-gray-800">{item.name}</h3>
        <p className="text-gray-600 my-2">{formatRupiah(item.price)}</p>
        <button
          onClick={() => openCustomizationModal(item, category)}
          className="w-full mt-2 bg-gradient-to-r from-red-500 to-yellow-500 text-white font-bold py-2 px-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
        >
          Pesan
        </button>
      </div>
    );
  };

  // Component for customization modal content
  const CustomizationModalContent = () => {
    const { id, name, price, category, cartIndex } = modalData;
    const isEditing = cartIndex !== -1;
    const [selections, setSelections] = useState(() => {
      if (isEditing) {
        return cart[cartIndex].selections;
      }
      return {
        isTakeAway: false,
        extras: [],
        level: null,
        subItems: {},
        fillings: [],
      };
    });

    const [currentBasePrice, setCurrentBasePrice] = useState(price);

    useEffect(() => {
      let newPrice = price;
      // Add take-away price for applicable categories
      if (selections.isTakeAway && ['ramen', 'sushi', 'takoyaki', 'okonomiyaki', 'paket'].includes(category)) {
        newPrice += 1000;
      }
      // Add extra prices
      selections.extras.forEach(extra => {
        const extraList = {
          'ramen': extrasRamen,
          'sushi': extrasSushi,
          'dorayaki': extrasDorayaki,
          'takoyaki': extrasTakoyaki,
          'okonomiyaki': extrasOkonomiyaki,
        }[category];
        if (extraList) {
          const extraItem = extraList.find(e => e.id === extra);
          if (extraItem) {
            newPrice += extraItem.price;
          }
        }
      });
      // Add level prices
      if (selections.level && ['ramen', 'okonomiyaki'].includes(category)) {
        const levelList = {
          'ramen': levelsRamen,
          'okonomiyaki': levelsOkonomiyaki,
        }[category];
        const levelItem = levelList.find(l => l.id === selections.level);
        if (levelItem) {
          newPrice += levelItem.price;
        }
      }
      setCurrentBasePrice(newPrice);
    }, [selections, price, category, cart, cartIndex]);


    const handleSelectChange = (key, value, maxItems) => {
        setSelections(prev => {
            if (key === 'isTakeAway') {
                return { ...prev, isTakeAway: !prev.isTakeAway };
            }
            if (key === 'level') {
                return { ...prev, level: prev.level === value ? null : value };
            }
            if (key === 'extras' || key === 'fillings') {
                const newArray = prev[key].includes(value)
                    ? prev[key].filter(item => item !== value)
                    : [...prev[key], value];
                return { ...prev, [key]: newArray };
            }
            if (key === 'subItems') {
                const currentItems = prev.subItems[value.subItemKey] || [];
                const isSelected = currentItems.includes(value.subItemValue);
                const newSubItems = { ...prev.subItems };

                if (isSelected) {
                    // Remove item
                    newSubItems[value.subItemKey] = currentItems.filter(item => item !== value.subItemValue);
                } else {
                    // Add item if max not reached
                    if (currentItems.length < value.maxItems) {
                        newSubItems[value.subItemKey] = [...currentItems, value.subItemValue];
                    } else {
                        // Show alert if max items reached
                        showAlert(`Anda hanya dapat memilih hingga ${value.maxItems} item untuk kategori ini.`);
                    }
                }
                return { ...prev, subItems: newSubItems };
            }
            return prev;
        });
    };

    // Data for customization options
    const extrasRamen = [
      { id: 'katsu', name: 'Katsu', price: 5000 },
      { id: 'ebi-tempura', name: 'Ebi Tempura', price: 6000 },
      { id: 'gyoza', name: 'Gyoza', price: 4000 },
      { id: 'fishball', name: 'Fishball', price: 3000 },
      { id: 'gyuniku', name: 'Gyuniku', price: 7000 },
    ];
    const levelsRamen = [
      { id: 'level-1', name: 'Level 1', price: 1000 },
      { id: 'level-2', name: 'Level 2', price: 2000 },
      { id: 'level-3', name: 'Level 3', price: 3000 },
    ];
    const extrasSushi = [
      { id: 'fried', name: 'Extra Fried', price: 3000 },
      { id: 'spicy', name: 'Extra Spicy', price: 2000 },
    ];
    const extrasDorayaki = [{ id: 'cheese', name: 'Extra Cheese', price: 2000 }];
    const extrasTakoyaki = [
      { id: 'cheese', name: 'Extra Cheese', price: 2000 },
      { id: 'spicy', name: 'Extra Spicy', price: 2000 },
    ];
    const fillingsOkonomiyaki = [
      { id: 'crab', name: 'Crab' },
      { id: 'chicken', name: 'Chicken' },
      { id: 'beef', name: 'Beef' },
      { id: 'sosis', name: 'Sosis' },
      { id: 'tuna', name: 'Tuna' },
      { id: 'shrimp', name: 'Shrimp' },
      { id: 'octopus', name: 'Octopus' },
    ];
    const extrasOkonomiyaki = [
      { id: 'fried-egg', name: 'Fried Egg', price: 4000 },
      { id: 'potato-chips', name: 'Potato Chips', price: 3000 },
      { id: 'melted-cheese', name: 'Melted Cheese', price: 5000 },
    ];
    const levelsOkonomiyaki = [
      { id: 'level-1', name: 'Level 1', price: 1000 },
      { id: 'level-2', name: 'Level 2', price: 2000 },
      { id: 'level-3', name: 'Level 3', price: 3000 },
    ];
    const birthdaySets = {
      'birthday-rokuon-set': {
        '3 fusion sushi': {
          options: ['beef cheese roll', 'tuna spicy roll', 'pizza roll', 'bbq roll', 'california roll', 'ebi tempura roll', 'california spicy roll', 'ocean roll'],
          max: 3
        },
        '4 original sushi': {
          options: ['beef', 'chicken', 'crab', 'octopus', 'shrimp', 'sosis'],
          max: 4
        },
        '1 mentai sushi': {
          options: ['mentai crab', 'mentai sosis', 'mentai shrimp'],
          max: 1
        },
        '1 mentai rice': {
          options: ['beef mentai rice', 'salmon kani mentai', 'chicken mentai rice'],
          max: 1
        },
        '2 takoyaki': {
          options: ['crab', 'chicken', 'beef', 'shrimp', 'sosis', 'octopus'],
          max: 2
        }
      },
      'birthday-kofuku-set': {
        '3 fusion sushi': {
          options: ['beef cheese roll', 'tuna spicy roll', 'pizza roll', 'bbq roll', 'california roll', 'ebi tempura roll', 'california spicy roll', 'ocean roll'],
          max: 3
        },
        '10 original sushi': {
          options: ['beef', 'chicken', 'crab', 'octopus', 'shrimp', 'sosis'],
          max: 10
        },
        '1 original daimyo sushi': {
          options: ['chicken', 'crab', 'beef', 'tuna'],
          max: 1
        }
      },
      'birthday-ruriko-set': {
        '4 fusion sushi': {
          options: ['beef cheese roll', 'tuna spicy roll', 'pizza roll', 'bbq roll', 'california roll', 'ebi tempura roll', 'california spicy roll', 'ocean roll'],
          max: 4
        }
      },
      'birthday-horyu-set': {
        '8 fusion sushi': {
          options: ['beef cheese roll', 'tuna spicy roll', 'pizza roll', 'bbq roll', 'california roll', 'ebi tempura roll', 'california spicy roll', 'ocean roll'],
          max: 8
        },
        '3 fusion daimyo sushi': {
          options: ['tuna spicy roll', 'beef cheese roll', 'bbq roll', 'spicy california roll'],
          max: 3
        },
        '2 original sushi': {
          options: ['beef', 'chicken', 'crab', 'octopus', 'shrimp', 'sosis'],
          max: 2
        },
        '1 mentai sushi': {
          options: ['mentai crab', 'mentai sosis', 'mentai shrimp'],
          max: 1
        },
        '1 mentai rice': {
          options: ['beef mentai rice', 'salmon kani mentai', 'chicken mentai rice'],
          max: 1
        }
      },
      'birthday-todai-set': {
        '6 fusion sushi': {
          options: ['beef cheese roll', 'tuna spicy roll', 'pizza roll', 'bbq roll', 'california roll', 'ebi tempura roll', 'california spicy roll', 'ocean roll'],
          max: 6
        },
        '1 fusion daimyo sushi': {
          options: ['tuna spicy roll', 'beef cheese roll', 'bbq roll', 'spicy california roll'],
          max: 1
        },
        '1 original sushi': {
          options: ['beef', 'chicken', 'crab', 'octopus', 'shrimp', 'sosis'],
          max: 1
        }
      },
      'birthday-tou-set': {
        '4 fusion sushi': {
          options: ['beef cheese roll', 'tuna spicy roll', 'pizza roll', 'bbq roll', 'california roll', 'ebi tempura roll', 'california spicy roll', 'ocean roll'],
          max: 4
        },
        '1 original sushi': {
          options: ['beef', 'chicken', 'crab', 'octopus', 'shrimp', 'sosis'],
          max: 1
        },
        '1 mentai sushi': {
          options: ['mentai crab', 'mentai sosis', 'mentai shrimp'],
          max: 1
        }
      },
      'birthday-chuson-set': {
        '9 fusion sushi': {
          options: ['beef cheese roll', 'tuna spicy roll', 'pizza roll', 'bbq roll', 'california roll', 'ebi tempura roll', 'california spicy roll', 'ocean roll'],
          max: 9
        },
        '3 fusion daimyo sushi': {
          options: ['tuna spicy roll', 'beef cheese roll', 'bbq roll', 'spicy california roll'],
          max: 3
        },
        '3 original sushi': {
          options: ['beef', 'chicken', 'crab', 'octopus', 'shrimp', 'sosis'],
          max: 3
        },
        '1 mentai sushi': {
          options: ['mentai crab', 'mentai sosis', 'mentai shrimp'],
          max: 1
        }
      },
      'birthday-senso-set': {
        '10 fusion sushi': {
          options: ['beef cheese roll', 'tuna spicy roll', 'pizza roll', 'bbq roll', 'california roll', 'ebi tempura roll', 'california spicy roll', 'ocean roll'],
          max: 10
        },
        '1 fusion daimyo sushi': {
          options: ['tuna spicy roll', 'beef cheese roll', 'bbq roll', 'spicy california roll'],
          max: 1
        },
        '1 original sushi': {
          options: ['beef', 'chicken', 'crab', 'octopus', 'shrimp', 'sosis'],
          max: 1
        }
      },
      'birthday-shintenno-set': {
        '2 fusion sushi': {
          options: ['beef cheese roll', 'tuna spicy roll', 'pizza roll', 'bbq roll', 'california roll', 'ebi tempura roll', 'california spicy roll', 'ocean roll'],
          max: 2
        },
        '1 original sushi': {
          options: ['beef', 'chicken', 'crab', 'octopus', 'shrimp', 'sosis'],
          max: 1
        },
        '1 mentai rice': {
          options: ['beef mentai rice', 'salmon kani mentai', 'chicken mentai rice'],
          max: 1
        }
      },
      'birthday-takoparty': {
        '6 takoyaki': {
          options: ['crab', 'chicken', 'beef', 'shrimp', 'sosis', 'octopus'],
          max: 6
        }
      }
    };
    
    // UI for category-specific customizations
    const renderCustomizations = () => {
      switch (category) {
        case 'ramen':
          return (
            <>
              <div>
                <h4 className="font-semibold mb-2">Isian Ramen</h4>
                <div className="grid grid-cols-2 gap-2">
                  {extrasRamen.map(extra => (
                    <button
                      key={extra.id}
                      onClick={() => handleSelectChange('extras', extra.id)}
                      className={`p-2 rounded-md transition-all ${
                        selections.extras.includes(extra.id)
                          ? 'bg-red-500 text-white'
                          : 'bg-gray-200 text-gray-800'
                      }`}
                    >
                      {extra.name} ({formatRupiah(extra.price)})
                    </button>
                  ))}
                </div>
              </div>
              <div className="mt-4">
                <h4 className="font-semibold mb-2">Level Pedas</h4>
                <div className="grid grid-cols-3 gap-2">
                  {levelsRamen.map(level => (
                    <button
                      key={level.id}
                      onClick={() => handleSelectChange('level', level.id)}
                      className={`p-2 rounded-md transition-all ${
                        selections.level === level.id
                          ? 'bg-red-500 text-white'
                          : 'bg-gray-200 text-gray-800'
                      }`}
                    >
                      {level.name} ({formatRupiah(level.price)})
                    </button>
                  ))}
                </div>
              </div>
            </>
          );
        case 'sushi':
          if (modalData.type === 'original') {
            return (
              <div className="mt-4">
                <h4 className="font-semibold mb-2">Ekstra</h4>
                <div className="grid grid-cols-2 gap-2">
                  {extrasSushi.map(extra => (
                    <button
                      key={extra.id}
                      onClick={() => handleSelectChange('extras', extra.id)}
                      className={`p-2 rounded-md transition-all ${
                        selections.extras.includes(extra.id)
                          ? 'bg-red-500 text-white'
                          : 'bg-gray-200 text-gray-800'
                      }`}
                    >
                      {extra.name} ({formatRupiah(extra.price)})
                    </button>
                  ))}
                </div>
              </div>
            );
          }
          return null;
        case 'dorayaki':
          return (
            <div className="mt-4">
              <h4 className="font-semibold mb-2">Ekstra</h4>
              <div className="grid grid-cols-2 gap-2">
                {extrasDorayaki.map(extra => (
                  <button
                    key={extra.id}
                    onClick={() => handleSelectChange('extras', extra.id)}
                    className={`p-2 rounded-md transition-all ${
                      selections.extras.includes(extra.id)
                        ? 'bg-red-500 text-white'
                        : 'bg-gray-200 text-gray-800'
                    }`}
                  >
                    {extra.name} ({formatRupiah(extra.price)})
                  </button>
                ))}
              </div>
            </div>
          );
        case 'takoyaki':
          return (
            <div className="mt-4">
              <h4 className="font-semibold mb-2">Ekstra</h4>
              <div className="grid grid-cols-2 gap-2">
                {extrasTakoyaki.map(extra => (
                  <button
                    key={extra.id}
                    onClick={() => handleSelectChange('extras', extra.id)}
                    className={`p-2 rounded-md transition-all ${
                      selections.extras.includes(extra.id)
                        ? 'bg-red-500 text-white'
                        : 'bg-gray-200 text-gray-800'
                    }`}
                  >
                    {extra.name} ({formatRupiah(extra.price)})
                  </button>
                ))}
              </div>
            </div>
          );
        case 'okonomiyaki':
          return (
            <>
              {modalData.type === 'mix' && (
                <div>
                  <h4 className="font-semibold mb-2">Isian Mix</h4>
                  <div className="grid grid-cols-2 gap-2">
                    {fillingsOkonomiyaki.map(filling => (
                      <button
                        key={filling.id}
                        onClick={() => handleSelectChange('fillings', filling.id)}
                        className={`p-2 rounded-md transition-all ${
                          selections.fillings.includes(filling.id)
                            ? 'bg-red-500 text-white'
                            : 'bg-gray-200 text-gray-800'
                        }`}
                      >
                        {filling.name}
                      </button>
                    ))}
                  </div>
                </div>
              )}
              <div className="mt-4">
                <h4 className="font-semibold mb-2">Ekstra</h4>
                <div className="grid grid-cols-2 gap-2">
                  {extrasOkonomiyaki.map(extra => (
                    <button
                      key={extra.id}
                      onClick={() => handleSelectChange('extras', extra.id)}
                      className={`p-2 rounded-md transition-all ${
                        selections.extras.includes(extra.id)
                          ? 'bg-red-500 text-white'
                          : 'bg-gray-200 text-gray-800'
                      }`}
                    >
                      {extra.name} ({formatRupiah(extra.price)})
                    </button>
                  ))}
                </div>
              </div>
              <div className="mt-4">
                <h4 className="font-semibold mb-2">Level Pedas</h4>
                <div className="grid grid-cols-3 gap-2">
                  {levelsOkonomiyaki.map(level => (
                    <button
                      key={level.id}
                      onClick={() => handleSelectChange('level', level.id)}
                      className={`p-2 rounded-md transition-all ${
                        selections.level === level.id
                          ? 'bg-red-500 text-white'
                          : 'bg-gray-200 text-gray-800'
                      }`}
                    >
                      {level.name} ({formatRupiah(level.price)})
                    </button>
                  ))}
                </div>
              </div>
            </>
          );
        case 'birthday':
          const setOptions = birthdaySets[id];
          return (
            <div className="mt-4 space-y-4">
              {Object.entries(setOptions).map(([subItemKey, { options, max }]) => (
                <div key={subItemKey}>
                  <h4 className="font-semibold mb-2">
                    {subItemKey} (Pilih hingga {max})
                  </h4>
                  <div className="grid grid-cols-2 gap-2">
                    {options.map(option => (
                      <button
                        key={option}
                        onClick={() => handleSelectChange('subItems', { subItemKey, subItemValue: option, maxItems: max })}
                        className={`p-2 rounded-md transition-all ${
                          (selections.subItems[subItemKey] || []).includes(option)
                            ? 'bg-red-500 text-white'
                            : 'bg-gray-200 text-gray-800'
                        }`}
                      >
                        {option}
                      </button>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          );
        default:
          return null;
      }
    };

    const handleAddToCart = () => {
        // Validation for birthday menu
        if (category === 'birthday') {
            const setOptions = birthdaySets[id];
            const allItemsSelected = Object.entries(setOptions).every(([key, { max }]) => {
                const selectedItemsCount = (selections.subItems[key] || []).length;
                return selectedItemsCount > 0 && selectedItemsCount <= max;
            });
            if (!allItemsSelected) {
                showAlert('Silahkan pilih isian untuk semua kategori!');
                return;
            }
        }
        
        if (isEditing) {
            updateCartItem({ ...modalData, price: currentBasePrice, selections, quantity: 1 }, cartIndex);
        } else {
            addToCart({ ...modalData, price: currentBasePrice, selections, quantity: 1 });
        }
    };

    return (
      <div className="p-6 bg-white rounded-lg shadow-xl max-h-[80vh] overflow-y-auto">
        <h3 className="text-2xl font-bold mb-4">{name}</h3>
        {renderCustomizations()}
        {category !== 'birthday' && (
          <div className="mt-6">
            <h4 className="font-semibold mb-2">Mode Pesanan</h4>
            <div className="grid grid-cols-2 gap-4">
              <button
                onClick={() => setSelections(prev => ({ ...prev, isTakeAway: false }))}
                className={`p-3 rounded-md font-bold transition-all ${
                  !selections.isTakeAway ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-800'
                }`}
              >
                Dine-in
              </button>
              <button
                onClick={() => setSelections(prev => ({ ...prev, isTakeAway: true }))}
                className={`p-3 rounded-md font-bold transition-all ${
                  selections.isTakeAway ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-800'
                }`}
              >
                Take-away ({formatRupiah(['ramen', 'sushi', 'takoyaki', 'okonomiyaki', 'paket'].includes(category) ? 1000 : 0)})
              </button>
            </div>
          </div>
        )}
        <div className="mt-6 pt-4 border-t border-gray-200">
          <div className="flex justify-between items-center mb-4">
            <span className="text-lg font-bold">Total:</span>
            <span className="text-2xl font-bold text-red-500">{formatRupiah(currentBasePrice)}</span>
          </div>
          <button
            onClick={handleAddToCart}
            className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white font-bold py-3 px-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
          >
            {isEditing ? 'Simpan Perubahan' : 'Tambah ke Keranjang'}
          </button>
        </div>
      </div>
    );
  };

  // Component for cart modal
  const CartModalContent = () => {
    const [customerName, setCustomerName] = useState('');
    const [customerAddress, setCustomerAddress] = useState('');
    const [customerNotes, setCustomerNotes] = useState('');
    const [showPaymentModal, setShowPaymentModal] = useState(false);
    const [paymentMethod, setPaymentMethod] = useState('');

    const total = cart.reduce((sum, item) => sum + item.price, 0);

    const handleOrder = () => {
      if (!customerName || !customerAddress) {
        showAlert('Silahkan isi nama dan alamat!');
        return;
      }
      
      const isBirthdaySelected = cart.some(item => item.category === 'birthday');
      
      if (isBirthdaySelected) {
        setPaymentMethod('qris');
        setShowPaymentModal(true);
      } else {
        const takeAwayOrder = cart.some(item => item.selections.isTakeAway);
        const dineInOrder = cart.some(item => !item.selections.isTakeAway);
        
        if (dineInOrder && !takeAwayOrder) {
          setPaymentMethod('dine-in');
          setShowPaymentModal(true);
        } else if (takeAwayOrder) {
          setPaymentMethod('qris');
          setShowPaymentModal(true);
        } else {
          // This case should ideally not be reached with the current logic
          showAlert("Pilih setidaknya satu menu.");
        }
      }
    };

    const handleSendToWhatsApp = () => {
      let message = `Halo, saya ingin memesan:\n\n`;
      cart.forEach(item => {
        message += `*${item.name}*\n`;
        if (item.selections) {
          const { isTakeAway, extras, level, fillings, subItems } = item.selections;
          
          if (item.category !== 'birthday') {
            const takeAwayCost = ['ramen', 'sushi', 'takoyaki', 'okonomiyaki', 'paket'].includes(item.category) ? ' (+Rp 1.000)' : '';
            message += `  - Mode: ${isTakeAway ? 'Take-away' + takeAwayCost : 'Dine-in'}\n`;
          }

          if (extras && extras.length > 0) {
            message += `  - Ekstra: ${extras.map(e => e.replace(/-/g, ' ')).join(', ')}\n`;
          }
          if (level) {
            message += `  - Level: ${level.replace(/-/g, ' ')}\n`;
          }
          if (fillings && fillings.length > 0) {
            message += `  - Isian: ${fillings.map(f => f.replace(/-/g, ' ')).join(', ')}\n`;
          }
          if (subItems) {
            Object.entries(subItems).forEach(([key, value]) => {
              if (value.length > 0) {
                message += `  - ${key}: ${value.join(', ')}\n`;
              }
            });
          }
        }
        message += `  - Harga: ${formatRupiah(item.price)}\n\n`;
      });

      message += `Total Pesanan: ${formatRupiah(total)}\n\n`;
      message += `Nama: ${customerName}\n`;
      message += `Alamat: ${customerAddress}\n`;
      message += `Catatan: ${customerNotes || '-'}\n\n`;
      message += `Terima kasih!`;

      // Replace with your WhatsApp number
      const phoneNumber = '6287865927598';
      const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`;
      window.open(whatsappUrl, '_blank');
    };

    if (showPaymentModal) {
      return (
        <div className="p-6 bg-white rounded-lg shadow-xl text-center">
          <h3 className="text-2xl font-bold mb-4">Pembayaran</h3>
          {paymentMethod === 'qris' ? (
            <>
              <p className="mb-4">Silahkan scan QRIS berikut untuk pembayaran.</p>
              <img src={qrisImage} alt="QRIS Payment" className="w-64 mx-auto rounded-lg" />
              <button
                onClick={() => { setShowPaymentModal(false); setIsModalOpen(false); setCart([]); handleSendToWhatsApp(); }}
                className="mt-6 w-full bg-green-500 text-white font-bold py-3 px-4 rounded-full shadow-lg hover:bg-green-600 transition-all"
              >
                Sudah Bayar & Kirim Pesanan ke WhatsApp
              </button>
            </>
          ) : (
            <>
              <p className="text-xl font-semibold text-gray-700 mb-4">
                Pesanan Anda telah diterima.
              </p>
              <p className="text-xl font-bold text-red-500 mb-6">
                Silahkan bayar di tempat.
              </p>
              <button
                onClick={() => { setShowPaymentModal(false); setIsModalOpen(false); setCart([]); handleSendToWhatsApp(); }}
                className="mt-4 w-full bg-green-500 text-white font-bold py-3 px-4 rounded-full shadow-lg hover:bg-green-600 transition-all"
              >
                Konfirmasi & Kirim Pesanan ke WhatsApp
              </button>
            </>
          )}
        </div>
      );
    }

    return (
      <div className="p-6 bg-white rounded-lg shadow-xl max-h-[80vh] overflow-y-auto relative flex flex-col">
        <h3 className="text-2xl font-bold mb-4">Keranjang</h3>
        {cart.length === 0 ? (
          <p className="text-gray-500 text-center flex-grow flex items-center justify-center">
            Keranjang Anda kosong.
          </p>
        ) : (
          <div className="space-y-4 flex-grow">
            {cart.map((item, index) => (
              <div key={index} className="flex items-center gap-4 bg-gray-100 p-3 rounded-lg">
                <img
                  src={item.image}
                  alt={item.name}
                  className="w-16 h-16 object-cover rounded-md"
                />
                <div className="flex-grow">
                  <h4 className="font-semibold text-gray-800">{item.name}</h4>
                  <p className="text-sm text-gray-600">
                    {item.selections.isTakeAway ? 'Take-away' : 'Dine-in'}
                  </p>
                  <div className="text-sm text-gray-600">
                    {item.selections.extras && item.selections.extras.length > 0 && (
                      <p>Ekstra: {item.selections.extras.map(e => e.replace(/-/g, ' ')).join(', ')}</p>
                    )}
                    {item.selections.level && (
                      <p>Level: {item.selections.level.replace(/-/g, ' ')}</p>
                    )}
                    {item.selections.fillings && item.selections.fillings.length > 0 && (
                       <p>Isian: {item.selections.fillings.map(f => f.replace(/-/g, ' ')).join(', ')}</p>
                    )}
                    {item.selections.subItems && Object.entries(item.selections.subItems).map(([key, value]) => value.length > 0 && (
                      <p key={key}>{key}: {value.join(', ')}</p>
                    ))}
                  </div>
                  <p className="text-red-500 font-bold">{formatRupiah(item.price)}</p>
                </div>
                <div className="flex gap-2">
                    <button
                        onClick={() => openCustomizationModal(item, item.category, index)}
                        className="text-gray-500 hover:text-blue-500"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-edit-3"><path d="M12 20h9"></path><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path></svg>
                    </button>
                    <button
                      onClick={() => removeCartItem(index)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 6h18"></path><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"></path><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                    </button>
                </div>
              </div>
            ))}
          </div>
        )}
        {cart.length > 0 && (
          <div className="mt-4 border-t pt-4 border-gray-200">
            <h4 className="text-lg font-bold mb-2">Informasi Pelanggan</h4>
            <div className="space-y-2">
              <input
                type="text"
                placeholder="Nama (wajib)"
                value={customerName}
                onChange={(e) => setCustomerName(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md"
              />
              <input
                type="text"
                placeholder="Alamat (wajib)"
                value={customerAddress}
                onChange={(e) => setCustomerAddress(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md"
              />
              <textarea
                placeholder="Catatan untuk pesanan (opsional)"
                value={customerNotes}
                onChange={(e) => setCustomerNotes(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md"
                rows="2"
              ></textarea>
            </div>
            <div className="flex justify-between items-center mt-4 mb-4">
              <span className="text-xl font-bold">Total:</span>
              <span className="text-3xl font-bold text-red-500">{formatRupiah(total)}</span>
            </div>
            <button
              onClick={handleOrder}
              className="w-full bg-gradient-to-r from-red-500 to-yellow-500 text-white font-bold py-3 px-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
            >
              Pesan Sekarang
            </button>
          </div>
        )}
      </div>
    );
  };

  // Generic Modal component
  const Modal = ({ isOpen, onClose, children }) => {
    if (!isOpen) return null;
    return (
      <div
        className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center p-4 z-50 overflow-y-auto"
        onClick={onClose}
      >
        <div
          className="relative max-w-lg w-full transform transition-all scale-100 opacity-100"
          onClick={(e) => e.stopPropagation()}
        >
          {children}
        </div>
      </div>
    );
  };

  // Main render function
  return (
    <div className="bg-gray-50 font-sans min-h-screen text-gray-900">
      <header className="fixed top-0 left-0 right-0 bg-white shadow-md z-40">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <h1 className="text-3xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-red-500 to-yellow-500">
            Katalog Makanan
          </h1>
          <div className="flex items-center space-x-4">
            <button
              onClick={getAiRecommendation}
              className="bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-full shadow-md transition-all transform hover:scale-110 relative"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 8V4H8"></path><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v2"></path></svg>
            </button>
            <button
              onClick={() => { setModalType('cart'); setIsModalOpen(true); }}
              className="bg-yellow-500 hover:bg-yellow-600 text-white p-2 rounded-full shadow-md transition-all transform hover:scale-110 relative"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-shopping-cart"><circle cx="8" cy="21" r="1"></circle><circle cx="19" cy="21" r="1"></circle><path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12"></path></svg>
              {cart.length > 0 && (
                <span className="absolute top-0 right-0 bg-red-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center transform translate-x-1/2 -translate-y-1/2">
                  {cart.length}
                </span>
              )}
            </button>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 pt-24 pb-8">
        {/* Menu Categories */}
        <nav className="mb-8 overflow-x-auto whitespace-nowrap scrollbar-hide">
          <div className="grid grid-cols-3 md:flex md:flex-wrap md:justify-center gap-2">
            {menuCategories.map(category => (
              <button
                key={category.id}
                onClick={() => setActiveCategory(category.id)}
                className={`flex-1 min-w-[100px] md:min-w-0 md:flex-none py-2 px-4 rounded-full text-sm font-bold transition-all transform hover:scale-105 ${
                  activeCategory === category.id
                    ? 'bg-red-500 text-white shadow-lg'
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                {category.name}
              </button>
            ))}
          </div>
        </nav>

        {/* Menu Items */}
        <section>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {menuData[activeCategory] && menuData[activeCategory].map(item => (
              <MenuCard key={item.id} item={item} category={activeCategory} />
            ))}
          </div>
        </section>
      </main>

      {/* Custom alert pop-up */}
      {alertMessage && (
        <div className="fixed bottom-8 right-8 bg-black bg-opacity-70 text-white px-6 py-3 rounded-lg shadow-xl z-50 transition-all duration-300 transform animate-fade-in-up">
          <p>{alertMessage}</p>
        </div>
      )}

      {/* Main Modal */}
      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
        {modalType === 'customization' && <CustomizationModalContent />}
        {modalType === 'cart' && <CartModalContent />}
      </Modal>

      {/* AI Recommendation Modal */}
      <Modal isOpen={isAiModalOpen} onClose={() => setIsAiModalOpen(false)}>
        <div className="bg-white p-6 rounded-lg shadow-xl relative max-w-lg mx-auto">
          <h3 className="text-xl font-bold mb-4">Rekomendasi Menu Gemini AI</h3>
          {isLoading ? (
            <div className="flex justify-center items-center h-24">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500"></div>
            </div>
          ) : (
            <p className="text-gray-700 whitespace-pre-wrap">{aiRecommendation}</p>
          )}
          <button
            onClick={() => setIsAiModalOpen(false)}
            className="mt-6 w-full bg-red-500 text-white font-bold py-2 px-4 rounded-full hover:bg-red-600 transition-colors"
          >
            Tutup
          </button>
        </div>
      </Modal>
    </div>
  );
};

export default App;
